#include <SFML/Graphics.hpp>
#include <iostream>

int main()
{
	sf::RenderWindow window(sf::VideoMode(800, 800), "SFML works!");
	window.setFramerateLimit(60);

	std::cout << "START" << std::endl;
	//texture
	sf::Texture rect1texture1, rect1texture2, rect1texture3;
	rect1texture1.loadFromFile("buttonStock1.png");
	rect1texture2.loadFromFile("buttonStock1h.png");
	rect1texture3.loadFromFile("buttonStock1d.png");

	//rectangle
	sf::RectangleShape rect1;
	rect1.setSize(sf::Vector2f(300, 200));
	rect1.setPosition(100, 200);
	rect1.setTexture(&rect1texture1);

	//rectangle font
	sf::Font font1;
	font1.loadFromFile("arial.ttf");

	//rectangle text
	sf::Text rect1text;
	rect1text.setFont(font1);
	rect1text.setString("Inventory");

	sf::FloatRect textRect = rect1text.getLocalBounds();
	rect1text.setOrigin(textRect.left + textRect.width / 2.0f,
						textRect.top + textRect.height / 2.0f);
	rect1text.setPosition(rect1.getPosition().x + (rect1.getSize().x / 2.0f), 
						  rect1.getPosition().y + (rect1.getSize().y / 2.0f));

	int detectCounter = 1;
	int hoverCheckBool = 0;
	int mouseHoldBool = 0;

	while (window.isOpen())
	{
		sf::Event event;

		// ESC = close event

		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
				window.close();



			if (event.type == sf::Event::KeyPressed)
			{
				if (event.key.code == sf::Keyboard::Escape)
				{
					std::cout << "the escape key was pressed" << std::endl;
					//std::cout << "control:" << event.key.control << std::endl;
					//std::cout << "alt:" << event.key.alt << std::endl;
					//std::cout << "shift:" << event.key.shift << std::endl;
					//std::cout << "system:" << event.key.system << std::endl;
					std::cout << "closing window now" << std::endl;
					window.close();
				}
			}


		}

		window.clear();
		window.draw(rect1);
		window.draw(rect1text);
		window.display();


		// if hover + pressed
		if (rect1.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))
			&& sf::Mouse::isButtonPressed(sf::Mouse::Left)
			&& mouseHoldBool == 0)
		{
			std::cout << "pressed" << std::endl;
			mouseHoldBool = 1;
			hoverCheckBool = 1;
			rect1.setTexture(&rect1texture3);
		}

		// if hover + not pressed --> highlight
		else if (rect1.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window))) 
			&& !sf::Mouse::isButtonPressed(sf::Mouse::Left)
			&& hoverCheckBool == 0
			&& mouseHoldBool == 0)
		{
			std::cout << "highlight" << std::endl;
			hoverCheckBool = 1;
			mouseHoldBool = 0;
			rect1.setTexture(&rect1texture2);
		}

		// if not hovering anymore --> normal
		else if (!rect1.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))
			&& hoverCheckBool == 1
			&& mouseHoldBool == 0)
		{
			std::cout << "highlight reset" << std::endl;
			rect1.setTexture(&rect1texture1);
			hoverCheckBool = 0;
		}

		// if pressed + still holding --> keep holding
		else if (mouseHoldBool == 1
			&& sf::Mouse::isButtonPressed(sf::Mouse::Left))
		{
			if (detectCounter == 1)
			{
				std::cout << "still holding" << std::endl;
				detectCounter++;
			}
			else if (detectCounter < 60) detectCounter++;
			else if (detectCounter >= 60) detectCounter = 1;
		}

		// if pressed + released --> do action
		else if (mouseHoldBool == 1
			&& !sf::Mouse::isButtonPressed(sf::Mouse::Left))
		{
			std::cout << "BUTTON ACTIVATE" << std::endl;
			rect1.setTexture(&rect1texture1);
			mouseHoldBool = 0;
			hoverCheckBool = 0;
			// do action
		}
	}

	return 0;
}
